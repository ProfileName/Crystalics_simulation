/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kruispunt;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Len
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     *
     * @param label
     */
    public GUI(JLabel label) {
        initComponents();
        setTitle("Crystallic Crossroad Simulation");

        jPanel1.add(label);
        jPanel1.validate();

        ItemListener itemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent itemEvent) {
                Main.getWorld().setPathVisibility(Integer.parseInt(((AbstractButton) itemEvent.getSource()).getText()) - 1, itemEvent.getStateChange() == ItemEvent.SELECTED);
                jPanel1.repaint();
            }
        };

        ItemListener lightListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent itemEvent) {
                int id = Integer.parseInt(((AbstractButton) itemEvent.getSource()).getText());
                switch (id) {
                    case 15:
                    case 16:
                        Main.getWorld().setLightState(id, itemEvent.getStateChange() == ItemEvent.SELECTED ? BusLight.STRAIGHT : TrafficLight.Status.RED.ordinal());
                        break;
                    case 166:
                        Main.getWorld().setLightState(16, itemEvent.getStateChange() == ItemEvent.SELECTED ? BusLight.RIGHT : TrafficLight.Status.RED.ordinal());
                        break;
                    default:
                        Main.getWorld().setLightState(id, itemEvent.getStateChange() == ItemEvent.SELECTED ? TrafficLight.Status.GREEN.ordinal() : TrafficLight.Status.RED.ordinal());
                        break;
                }
                jPanel1.repaint();
            }
        };
        int lightCount = Main.getWorld().getLightCount();
        for (int i = 0; i < lightCount; ++i) {

            JCheckBox b = new JCheckBox();
            b.setText("" + i);
            b.addItemListener(lightListener);
            panelLights.add(b);
            if (i == 16) {
                b = new JCheckBox();
                b.setText("" + 166);
                b.addItemListener(lightListener);
                panelLights.add(b);
            }
        }
        panelLights.validate();

        JPanel panel = panelVehicles;
        for (int i = 0; i < Main.getWorld().getPathCount(); ++i) {
            JCheckBox c = new JCheckBox();
            c.setText("" + (i + 1));
            c.addItemListener(itemListener);
            panel.add(c);
            switch (i) {
                case 14:
                    panelVehicles.validate();
                    panel = panelCycles;
                    break;
                case 19:
                    panel = panelBusses;
                    break;
                case 22:
                    panel = panelPeds;
                    break;
            }

        }
        panelPaths.validate();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        buttonConnect = new javax.swing.JButton();
        jLabel1 = new JLabel();
        ipField = new javax.swing.JTextField();
        jLabel2 = new JLabel();
        portField = new javax.swing.JTextField();
        buttonDisconnect = new javax.swing.JButton();
        conIndicator = new JLabel();
        jPanel1 = new JPanel();
        jPanel2 = new JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelLights = new JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        panelPaths = new JPanel();
        panelVehicles = new JPanel();
        panelBusses = new JPanel();
        panelCycles = new JPanel();
        panelPeds = new JPanel();
        buttonSpawnRandom = new javax.swing.JToggleButton();
        checkBoxDisplayTLNumbers = new JCheckBox();
        buttonSpawnSelected = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        serverButton = new javax.swing.JMenuItem();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialog1.setTitle("Server Address");
        jDialog1.setMinimumSize(new java.awt.Dimension(180, 120));
        jDialog1.setResizable(false);

        buttonConnect.setText("Connect");
        buttonConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buttonConnectMouseReleased(evt);
            }
        });

        jLabel1.setText("IP:");

        ipField.setToolTipText("IP");

        jLabel2.setText("Port:");

        buttonDisconnect.setText("Disconnect");
        buttonDisconnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buttonDisconnectMouseReleased(evt);
            }
        });

        conIndicator.setText("Disconnected");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conIndicator)))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(buttonDisconnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonConnect)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(conIndicator)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDisconnect)
                    .addComponent(buttonConnect))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("TL Control"));

        panelLights.setFocusable(false);
        panelLights.setPreferredSize(new java.awt.Dimension(144, 250));
        panelLights.setLayout(new java.awt.GridLayout(10, 4));
        jScrollPane1.setViewportView(panelLights);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Paths Visibility"));
        jScrollPane2.setMaximumSize(new java.awt.Dimension(32767, 1000));

        panelPaths.setFocusable(false);
        panelPaths.setPreferredSize(new java.awt.Dimension(100, 250));
        panelPaths.setLayout(new java.awt.GridLayout(4, 1));

        panelVehicles.setBorder(javax.swing.BorderFactory.createTitledBorder("Car"));
        panelVehicles.setPreferredSize(new java.awt.Dimension(302, 41));
        panelVehicles.setLayout(new java.awt.GridLayout());
        panelPaths.add(panelVehicles);

        panelBusses.setBorder(javax.swing.BorderFactory.createTitledBorder("Bus"));
        panelBusses.setLayout(new java.awt.GridLayout());
        panelPaths.add(panelBusses);

        panelCycles.setBorder(javax.swing.BorderFactory.createTitledBorder("Cycling"));
        panelCycles.setLayout(new java.awt.GridLayout());
        panelPaths.add(panelCycles);

        panelPeds.setBorder(javax.swing.BorderFactory.createTitledBorder("Peds"));
        panelPeds.setLayout(new java.awt.GridLayout());
        panelPaths.add(panelPeds);

        jScrollPane2.setViewportView(panelPaths);

        buttonSpawnRandom.setText("Random Traffic Spawner");
        buttonSpawnRandom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonSpawnRandomMousePressed(evt);
            }
        });

        checkBoxDisplayTLNumbers.setText("Display TL-Numbers");
        checkBoxDisplayTLNumbers.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                checkBoxDisplayTLNumbersItemStateChanged(evt);
            }
        });

        buttonSpawnSelected.setText("Spawn on selected paths");
        buttonSpawnSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonSpawnSelectedMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBoxDisplayTLNumbers)
                            .addComponent(buttonSpawnRandom)
                            .addComponent(buttonSpawnSelected))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSpawnRandom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSpawnSelected)
                .addGap(18, 18, 18)
                .addComponent(checkBoxDisplayTLNumbers)
                .addGap(62, 62, 62))
        );

        jMenu1.setText("Server");

        serverButton.setText("Settings");
        serverButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                serverButtonMouseReleased(evt);
            }
        });
        jMenu1.add(serverButton);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 816, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setConnectionIndication(final boolean connected) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                conIndicator.setText(connected ? "Connected" : "Disconnected");
            }
        });
    }

    private void buttonSpawnRandomMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSpawnRandomMousePressed
        if (!buttonSpawnRandom.isSelected()) {
            Main.getWorld().getTrafficSpawner().start();
        } else {
            Main.getWorld().getTrafficSpawner().stop();
        }
    }//GEN-LAST:event_buttonSpawnRandomMousePressed

    private void checkBoxDisplayTLNumbersItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_checkBoxDisplayTLNumbersItemStateChanged
        Main.getWorld().setTLNumberVisibility(checkBoxDisplayTLNumbers.isSelected());
        jPanel1.repaint();
    }//GEN-LAST:event_checkBoxDisplayTLNumbersItemStateChanged

    private void serverButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serverButtonMouseReleased

        jDialog1.setLocationRelativeTo(this);
        jDialog1.pack();
        jDialog1.setVisible(true);
    }//GEN-LAST:event_serverButtonMouseReleased

    private void buttonSpawnSelectedMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSpawnSelectedMousePressed

        for (Component c : panelVehicles.getComponents()) {
            if (c instanceof JCheckBox) {
                JCheckBox ch = (JCheckBox) c;
                if (ch.isSelected()) {
                    Main.getWorld().getTrafficSpawner().spawnOnPath(Integer.parseInt((ch).getText()) - 1);
                }
            }
        }
        for (Component c : panelBusses.getComponents()) {
            if (c instanceof JCheckBox) {
                JCheckBox ch = (JCheckBox) c;
                if (ch.isSelected()) {
                    Main.getWorld().getTrafficSpawner().spawnOnPath(Integer.parseInt((ch).getText()) - 1);
                }
            }
        }
        for (Component c : panelCycles.getComponents()) {
            if (c instanceof JCheckBox) {
                JCheckBox ch = (JCheckBox) c;
                if (ch.isSelected()) {
                    Main.getWorld().getTrafficSpawner().spawnOnPath(Integer.parseInt((ch).getText()) - 1);
                }
            }
        }
        for (Component c : panelPeds.getComponents()) {
            if (c instanceof JCheckBox) {
                JCheckBox ch = (JCheckBox) c;
                if (ch.isSelected()) {
                    Main.getWorld().getTrafficSpawner().spawnOnPath(Integer.parseInt((ch).getText()) - 1);
                }
            }
        }
    }//GEN-LAST:event_buttonSpawnSelectedMousePressed

    private void buttonConnectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonConnectMouseReleased
        try {
            int port = Integer.parseInt(portField.getText());
            Main.getConnection().start(ipField.getText(), port);
            jDialog1.setVisible(false);
        } catch (NumberFormatException | IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonConnectMouseReleased

    private void buttonDisconnectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonDisconnectMouseReleased
        Main.getConnection().stop();
    }//GEN-LAST:event_buttonDisconnectMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonConnect;
    private javax.swing.JButton buttonDisconnect;
    private javax.swing.JToggleButton buttonSpawnRandom;
    private javax.swing.JButton buttonSpawnSelected;
    private JCheckBox checkBoxDisplayTLNumbers;
    private JLabel conIndicator;
    private javax.swing.JTextField ipField;
    private javax.swing.JDialog jDialog1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private JPanel panelBusses;
    private JPanel panelCycles;
    private JPanel panelLights;
    private JPanel panelPaths;
    private JPanel panelPeds;
    private JPanel panelVehicles;
    private javax.swing.JTextField portField;
    private javax.swing.JMenuItem serverButton;
    // End of variables declaration//GEN-END:variables
}
